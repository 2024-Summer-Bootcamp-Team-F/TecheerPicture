services:
  mysqldb:
    build: ./backend-django/db
    container_name: mysqldb
    env_file:
      - "backend-django/db/.env"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  backend:
    build:
      context: ./backend-django/backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend-django:/app
      - ./backend-django/logs:/app/logs
    restart: always
    depends_on:
      - mysqldb
      - rabbitmq
      - redis
    networks:
      - app-network
    command: >
      bash -c "python wait_mysql.py &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      gunicorn -w 4 -b 0.0.0.0:8000 backend.wsgi:application"

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - build_folder:/var/www/frontend
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    
  frontend:
    build:
      context: ./frontend/server
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    volumes:
      - /frontend/server/node_modules
      - build_folder:/frontend/dist
    networks:
      - app-network

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    networks:
      - app-network
    command: >
      bash -c "rabbitmq-plugins enable rabbitmq_prometheus &&
      rabbitmq-server"

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  celery:
    build:
      context: ./backend-django/backend
      dockerfile: Dockerfile
    container_name: celery
    volumes:
      - ./backend-django:/app
      - ./backend-django/logs:/app/logs
    restart: always
    depends_on:
      - backend
      - rabbitmq
      - redis
    networks:
      - app-network
    command: ["celery", "-A", "backend", "worker", "--loglevel=info"]

volumes:
  mysql_data:
  rabbitmq_data:
  build_folder: null

networks:
  app-network:
    driver: bridge
